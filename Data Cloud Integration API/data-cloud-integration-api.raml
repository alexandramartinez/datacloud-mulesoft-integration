#%RAML 1.0
title: Data Cloud Integration API
version: 1.1.0

types:
  CustomErrorMessage:
    properties:
      error:
        type: object
        properties:
          description:
            type: string
            example: Request returned status code 409
          message:
            type: string
            example: The request conflicts with current state of the target resource.
          statusCode:
            type: number
            example: 409
          reasonPhrase:
            type: string
            example: Conflict
          MuleRecommendation: 
            type: string
            example: There probably is already a job in queue for this specific object. If you have the job ID, you can try getting the job's details to verify its state. If the state appears as InProgress, you will have to wait until Data Cloud finishes the processing (JobComplete/Failed) to try this operation again.
  DataCloudSuccessfulResponse:
    properties:
      accepted:
        default: true
        example: true
        type: boolean
  DataCloudBulkJob:
    properties:
      object:
        type: string
        example: customer
      id:
        type: string
        example: "asjdfl-a2452-vcc453545"
      operation:
        type: string
        example: upsert
      sourceName:
        type: string
        example: runner_profiles
      createdById:
        type: string
        example: "06521s54JF"
      createdDate:
        type: string
        example: "2024-07-11T20:15:00.000000Z"
      systemModstamp:
        type: string
        example: ""
      state:
        type: string
        example: UploadComplete
      contentType:
        type: string
        example: CSV
      apiVersion:
        type: string
        example: v1
      contentUrl:
        type: string
        example: "/api/v1/ingest/jobs/asjdfl-a2452-vcc453545/batches"
      retries:
        type: number
        example: 0
      totalProcessingTime:
        type: number
        example: 0

traits:
  dataCloudApiParams:
    queryParameters:
      sourceApiName:
        displayName: Ingestion API's name
        description: |
          You can find this value by taking a look at your Ingestion API settings (where you uploaded the YAML schema) in Salesforce.
        example: MuleSoft_Ingestion_API
        type: string
      objectName:
        displayName: Ingestion API's object name
        description: |
          You can find this value by taking a look at your Ingestion API settings. This should be one of the objects you uploaded from the YAML schema in Salesforce. You should also be able to find this from your Data Stream settings.
        example: runner_profiles
        type: string
  bulkApiCustomErrorResponse:
    responses:
      409:
        body:
          application/json:
            type: CustomErrorMessage
      404:
        body:
          application/json:
            type: CustomErrorMessage

/schema:
  post:
    displayName: Get YAML Schema for Ingestion API
    queryParameters:
      openapiversion?:
        default: 3.0.3
        example: 3.0.3
        type: string
    body:
      application/json:
        example:
          strict: true
          value:
            customer:
              id: 1
              first_name: Alex
              last_name: Martinez
              email: alex@sf.com
              address:
                street: 415 Mission Street
                city: San Francisco
                state: CA
                postalCode: "94105"
                geo:
                  lat: 37.78916
                  lng: -122.39521
        type: object
    responses:
      "200":
        body:
          application/raml+yaml:
            example:
              strict: true
              value:
                openapi: 3.0.3
                components:
                  schemas:
                    customer:
                      type: object
                      properties:
                        id:
                          type: number
                        first_name:
                          type: string
                        last_name:
                          type: string
                        email:
                          type: string
                        street:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        postalCode:
                          type: string
                        lat:
                          type: number
                        lng:
                          type: number
            type: object
    description: |
      With this endpoint, you can send a JSON object to be transformed into the OpenAPI YAML schema. This is needed to create your Ingestion API and Data Stream in Data Cloud.

      Because the Ingestion API doesn't accept nested objects on the schema, this endpoint will transform your multi-level object into the single-level needed for Data Cloud.

      For example, the following input payload:

      ```json
      {
        "customer": {
          "id": 1,
          "first_name": "Alex",
          "last_name": "Martinez",
          "email": "alex@sf.com",
          "address": {
            "street": "415 Mission Street",
            "city": "San Francisco",
            "state": "CA",
            "postalCode": "94105",
            "geo": {
              "lat": 37.78916,
              "lng": -122.39521
            }
          }
        }
      }
      ```

      would be flattened and transformed into the following output:

      ```json
      {
        "customer": {
          "id": 1,
          "first_name": "Alex",
          "last_name": "Martinez",
          "email": "alex@sf.com",
          "street": "415 Mission Street",
          "city": "San Francisco",
          "state": "CA",
          "postalCode": "94105",
          "lat": 37.78916,
          "lng": -122.39521
        }
      }
      ```

      then, based on this new input, you will receive the YAML schema like the following:

      > ⚠️ **Important**
      >
      > Take note of the object(s) name(s) from this YAML schema because you will use them for the insertion and deletion.
      > For example, in the following YAML schema, the object name is `customer`.

      ```yaml
      openapi: 3.0.3
      components:
        schemas:
          customer:
            type: object
            properties:
              id:
                type: number
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              street:
                type: string
              city:
                type: string
              state:
                type: string
              postalCode:
                type: string
              lat:
                type: number
              lng:
                type: number
      ```

      > Important: Make sure you set the `openapiversion` query parameter to set the version. Otherwise, the default of `3.0.3` will be outputted.

/query:
  post:
    displayName: Perform a SOQL Query
    body:
      text/plain:
        example: SELECT * FROM MuleSoft_Ingestion_API_runner_p_38447E8E__dll LIMIT 100
        type: string
    responses:
      "200":
        body:
          application/json:
            items:
              example:
                strict: true
                value:
                  DataSourceObject__c: MuleSoft_Ingestion_API_runner_profiles_38447E8E
                  DataSource__c: MuleSoft_Ingestion_API_996db928_2078_4e3a_9c67_1c80b32790aa
                  city__c: Toronto
                  created__c: 2017-07-21
                  email__c: alex@sf.com
                  first_name__c: Alex
                  gender__c: NB
                  last_name__c: Martinez
                  maid__c: 1
                  state__c: ON
              type: object
    description: |
      Send your SOQL query in the body of the request on a `text/plain` format.

      For example:

      ```sql
      SELECT * FROM MuleSoft_Ingestion_API_runner_p_38447E8E__dll LIMIT 100
      ```

      You will receive a JSON response.

      For example, from the previous query, you'd receive a JSON Array with the results of the `SELECT`:

      ```json
      [
        {
          "DataSourceObject__c": "MuleSoft_Ingestion_API_runner_profiles_38447E8E",
          "DataSource__c": "MuleSoft_Ingestion_API_996db928_2078_4e3a_9c67_1c80b32790aa",
          "city__c": "Toronto",
          "created__c": "2017-07-21",
          "email__c": "alex@sf.com",
          "first_name__c": "Alex",
          "gender__c": "NB",
          "last_name__c": "Martinez",
          "maid__c": 1.000000000000000000,
          "state__c": "ON"
        }
      ]
      ```

/insert:
  post:
    displayName: Insert new records through streaming
    is:
      - dataCloudApiParams
    body:
      application/json:
        items:
          example:
            strict: true
            value:
              maid: 1
              first_name: Alex
              last_name: Martinez
              email: alex@sf.com
              gender: NB
              city: Toronto
              state: ON
              created: 2017-07-21
          type: object
    responses:
      "200":
        body:
          application/json:
            type: DataCloudSuccessfulResponse
    description: |
      Make sure you add the following query parameters to let Data Cloud know more information of where you want to insert new records:

      - `sourceApiName` i.e., `MuleSoft_Ingestion_API`
      - `objectName` i.e., `runner_profiles`

      Next, in the body of the request, make sure to use a JSON Array. Each Object inside this Array is a new record.

      For example:

      ```json
      [
        {
          "maid": 1,
          "first_name": "Alex",
          "last_name": "Martinez",
          "email": "alex@sf.com",
          "gender": "NB",
          "city": "Toronto",
          "state": "ON",
          "created": "2017-07-21"
        }
      ]
      ```

      If everything ran smoothly, you will receive a `200 - OK` successful response.

      > ℹ️ **Note**
      >
      > It may take a few minutes for your data to be updated in Data Cloud. You can manually check the records in Data Cloud or wait to attempt the `/query` from your MuleSoft API.

/delete:
  delete:
    displayName: Delete existing records through streaming
    is:
      - dataCloudApiParams
    body:
      application/json:
        items:
          type:
            anyOf:
              -
                displayName: string
                type: string
                example: ID123
              -
                displayName: number
                type: number
                format: int
                example: 123
        uniqueItems: true
        example:
           [ 1, 2, 3 ]
    responses:
      "200":
        body:
          application/json:
            type: DataCloudSuccessfulResponse
    description: |
      Make sure you add the following query parameters to let Data Cloud know more information of where you want to delete the records from:

      - `sourceApiName` i.e., `MuleSoft_Ingestion_API`
      - `objectName` i.e., `runner_profiles`

      Next, in the body of the request, make sure to use a JSON Array. Each Object inside this Array is the ID of the record to delete.

      For example:

      ```json
      [
        1
      ]
      ```

      If everything ran smoothly, you will receive a `200 - OK` successful response.

      > ℹ️ **Note**
      >
      > It may take a few minutes for your data to be updated in Data Cloud. You can manually check the records in Data Cloud or wait to attempt the `/query` from your MuleSoft API.

/bulk:
  get:
    displayName: Retrieve the information for all the jobs
    responses:
      200:
        body:
          application/json:
            type: array
            items:
              type: DataCloudBulkJob
    description: |
      There is no need to send additional information with this call. The Mule application will use the Data Cloud credentials you have configured to make the call to your Data Cloud instance.

      If the call was successful, you will receive a `200 - OK` successful response with the list of the Data Cloud jobs you have access to. If no jobs are available, you will receive an empty array `[]`.

      For example: 

      ```json
      [
        {
            "object": "customer",
            "id": "f3a58-8d22-4a72-a41d-083c3c",
            "operation": "upsert",
            "sourceName": "MuleSoft_Customers",
            "createdById": "0000AD",
            "createdDate": "2024-07-11T20:15:00.000000Z",
            "systemModstamp": "",
            "state": "UploadComplete",
            "contentType": "CSV",
            "apiVersion": "v1",
            "contentUrl": "/api/v1/ingest/jobs/f3a58-8d22-4a72-a41d-083c3c/batches",
            "retries": 0,
            "totalProcessingTime": 0
        }
      ]
      ```
      
  /upsert:
    post:
      displayName: Insert unexisting records or update existing ones in bulk
      is:
        - dataCloudApiParams
        - bulkApiCustomErrorResponse
      body:
        text/plain:
          example: |
            id,first_name,last_name,email,street,city,state,postalCode,lat,lng
            1,Alex,Martinez,alex@sf.com,415 Mission Street,San Francisco,CA,94105,37.78916,-122.39521
            2,Akshata,Sawant,akshata@sf.com,415 Mission Street,San Francisco,CA,94105,37.78916,-122.39521
            3,Danielle,Larregui,danielle@sf.com,415 Mission Street,San Francisco,CA,94105,37.78916,-122.39521
        application/json:
          items:
            example:
              strict: true
              value:
                maid: 1
                first_name: Alex
                last_name: Martinez
                email: alex@sf.com
                gender: NB
                city: Toronto
                state: ON
                created: 2017-07-21
            type: object
      responses:
        "200":
          body:
            application/json:
              type: DataCloudBulkJob
      description: |
        Make sure you add the following query parameters to let Data Cloud know more information of where you want to insert new records:

        - `sourceApiName` i.e., `MuleSoft_Ingestion_API`
        - `objectName` i.e., `runner_profiles`

        Next, in the body of the request, make sure to use a JSON or CSV format, using application/json or text/plain content type respectively. The headers on the first line (for CSV) or the field names (for JSON) have to match the names of the fields in Data Cloud.

        For example:

        ```csv
        maid,first_name,last_name,email,gender,city,state,created
        1,Alex,Martinez,alex@sf.com,NB,Toronto,ON,2017-07-21
        ```

        or

        ```json
        [
          {
            "maid": 1,
            "first_name": "Alex",
            "last_name": "Martinez",
            "email": "alex@sf.com",
            "gender": "NB",
            "city": "Toronto",
            "state": "ON",
            "created": "2017-07-21"
          }
        ]
        ```

        If everything ran smoothly, you will receive a `200 - OK` successful response with the details of the Job.

        For example:

        ```json
        {
            "object": "customer",
            "id": "f3a58-8d22-4a72-a41d-083c3c",
            "operation": "upsert",
            "sourceName": "MuleSoft_Customers",
            "createdById": "0000AD",
            "createdDate": "2024-07-11T20:15:00.000000Z",
            "systemModstamp": "",
            "state": "UploadComplete",
            "contentType": "CSV",
            "apiVersion": "v1",
            "contentUrl": "/api/v1/ingest/jobs/f3a58-8d22-4a72-a41d-083c3c/batches",
            "retries": 0,
            "totalProcessingTime": 0
        }
        ```

        > ℹ️ **Note**
        >
        > It may take a few minutes/hours for your data to be updated in Data Cloud. You can manually check the records in Data Cloud, attempt the `/query` from your MuleSoft API, or attempt the `GET /bulk/{id}` from your MuleSoft API.

  /{id}:
    uriParameters:
      id:
        type: string
        example: "f3a58-8d22-4a72-a41d-083c3c"
    delete:
      displayName: Close/Abort and Delete an existing bulk job
      is: 
        - bulkApiCustomErrorResponse
      responses:
        "200":
          body:
            application/json:
              type: DataCloudSuccessfulResponse
      description: |
        Deletes an existing bulk job based on its ID. Only the Job ID is needed, nothing else.

        If the given job is still open (in an `Open` state), it will be aborted first in order to delete it. If the job has already been closed (`UploadComplete` state) and it's already in the queue, you will have to wait until it finishes processing in Data Cloud before attempting to delete again - you will receive a 409 error if this is the case.

        If everything ran smoothly, you will receive a `200 - OK` successful response.

    get:
      displayName: Retrieve the information for a bulk job
      is:
        - dataCloudApiParams
        - bulkApiCustomErrorResponse
      responses:
        "200":
          body:
            application/json:
              type: DataCloudBulkJob
      description: |
        Make sure you add the following query parameters to let Data Cloud know more information of where you want to insert new records:

        - `sourceApiName` i.e., `MuleSoft_Ingestion_API`
        - `objectName` i.e., `runner_profiles`

        If everything ran smoothly, you will receive a `200 - OK` successful response with the details of the Job.

        For example:

        ```json
        {
            "object": "customer",
            "id": "f3a58-8d22-4a72-a41d-083c3c",
            "operation": "upsert",
            "sourceName": "MuleSoft_Customers",
            "createdById": "0000AD",
            "createdDate": "2024-07-11T20:15:00.000000Z",
            "systemModstamp": "",
            "state": "UploadComplete",
            "contentType": "CSV",
            "apiVersion": "v1",
            "contentUrl": "/api/v1/ingest/jobs/f3a58-8d22-4a72-a41d-083c3c/batches",
            "retries": 0,
            "totalProcessingTime": 0
        }
        ```
